
import { z } from 'zod';

// Zod schema for Email Template validation
export const emailTemplateSchema = z.object({
  id: z.string().optional(), // Optional for creation, present for existing
  name: z.string().min(3, "Template name must be at least 3 characters"),
  subject: z.string().min(5, "Subject must be at least 5 characters"),
  body: z.string().min(10, "Body must be at least 10 characters"), // Can add more complex validation if using HTML
  // Potentially add fields for usage context (e.g., 'onboarding', 'leaveApproval') later
  usageContext: z.string().optional().describe("Describes when this template is used (e.g., onboarding, leave_approval)"),
});

// TypeScript type derived from the Zod schema
export type EmailTemplate = z.infer<typeof emailTemplateSchema>;

// Type for the form data (excluding fields generated by DB like ID)
export type EmailTemplateFormData = Omit<EmailTemplate, 'id'>;
